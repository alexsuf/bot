import os
import json
import random
import psycopg2
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ ===
with open("token.txt", "r") as f:
    TOKEN = f.read().strip()

CATS_DIR = "/cats"
INFO_FILE = "info.txt"
DB_CONFIG_FILE = "base.txt"

# === –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞ ===
def read_db_config(path: str):
    if not os.path.exists(path):
        raise FileNotFoundError(f"–§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    with open(path, "r", encoding="utf-8") as f:
        return json.load(f)

# === –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ===
conn = None
try:
    db_config = read_db_config(DB_CONFIG_FILE)
    conn = psycopg2.connect(
        host=db_config["host"],
        database=db_config["database"],
        user=db_config["user"],
        password=db_config["password"],
        port=db_config["port"]
    )
    conn.autocommit = True
except Exception as e:
    print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", e)

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É ===
def log_message_to_db(username: str, message: str):
    if conn:
        try:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO bot_logs (username, log) VALUES (%s, %s);",
                    (username, message)
                )
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞:", e)

# === –ö–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_buttons():
    keyboard = [
        ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ñπ", "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∞ üê±"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = "Alex"
    log_message_to_db(username, "/start")
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_buttons()
    )

# === /info ===
async def show_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = "Alex"
    log_message_to_db(username, "/info")
    if os.path.exists(INFO_FILE):
        with open(INFO_FILE, "r", encoding="utf-8") as f:
            info_text = f.read()
        await update.message.reply_text(info_text, reply_markup=get_main_buttons())
    else:
        await update.message.reply_text("–§–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_buttons())

# === /cats –∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∞ üê±" ===
async def send_random_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = "Alex"
    log_message_to_db(username, "/cats")

    image_files = [
        f for f in os.listdir(CATS_DIR)
        if f.lower().endswith((".jpg", ".jpeg", ".png"))
    ]
    if image_files:
        selected = random.choice(image_files)
        with open(os.path.join(CATS_DIR, selected), "rb") as photo:
            await update.message.reply_photo(photo=photo, reply_markup=get_main_buttons())
    else:
        await update.message.reply_text("–ö–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòø", reply_markup=get_main_buttons())

# === /base ‚Äî –≤—ã–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ bot_users ===
async def show_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = "Alex"
    log_message_to_db(username, "/base")

    if not conn:
        await update.message.reply_text("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT name, email, password FROM bot_users;")
            rows = cursor.fetchall()
            if not rows:
                await update.message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ.", reply_markup=get_main_buttons())
                return

            lines = []
            for i, (name, email, password) in enumerate(rows, start=1):
                email_part = email if email else "‚Äî"
                password_masked = "‚óè‚óè‚óè‚óè‚óè‚óè"
                lines.append(f"{i}. üë§ {name}\nüìß {email_part}\nüîí {password_masked}")

            message = "\n\n".join(lines)
            await update.message.reply_text(message, reply_markup=get_main_buttons())

    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", reply_markup=get_main_buttons())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = "Alex"
    user_message = update.message.text
    log_message_to_db(username, user_message)

    if user_message == "–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∞ üê±":
        await send_random_cat(update, context)

    elif user_message == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ‚Ñπ" or user_message == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Ñπ":
        await show_info(update, context)

    else:
        await update.message.reply_text(f"–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {user_message}", reply_markup=get_main_buttons())

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("info", show_info))
    app.add_handler(CommandHandler("cats", send_random_cat))
    app.add_handler(CommandHandler("base", show_users))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
